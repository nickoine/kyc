version: '3.8'
services:
  db:
    image: postgres:15
    profiles:
      - integration-tests
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://myuser:mypassword@db:5432/mydb
    command: python -m pytest tests/integration


#  db:
#    image: postgres:15
#    container_name: postgres_test
#    restart: always
#    environment:
#      POSTGRES_DB: ${TEST_DB_NAME}
#      POSTGRES_USER: ${TEST_DB_USER}
#      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
#    ports:
#      - "${TEST_DB_PORT}:5432"
#    volumes:
#      - postgres_test_data:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U ${TEST_DB_USER} -d ${TEST_DB_NAME}" ]
#      interval: 5s
#      timeout: 5s
#      retries: 5
#
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    depends_on:
#      db:
#        condition: service_healthy
#    environment:
#      DB_NAME: ${TEST_DB_NAME}
#      DB_USER: ${TEST_DB_USER}
#      DB_PASSWORD: ${TEST_DB_PASSWORD}
#      DB_HOST: ${DB_HOST}
#      DB_PORT: ${TEST_DB_PORT}
#      DATABASE_URL: postgres://${TEST_DB_USER}:${TEST_DB_PASSWORD}@db:${TEST_DB_PORT}/${TEST_DB_NAME}
#      DJANGO_SETTINGS_MODULE: kyc.etc.test  # Use test settings
#    command: >
#      sh -c "python manage.py test"
##    command: >
##      sh -c "while ! pg_isready -h db -p ${TEST_DB_PORT} -U ${TEST_DB_USER} -d ${TEST_DB_NAME}; do sleep 1; done &&
##             python manage.py makemigrations --no-input &&
##             python manage.py migrate --no-input &&
##             python manage.py test"
#    volumes:
#      - .:/app
#
#volumes:
#  postgres_test_data: